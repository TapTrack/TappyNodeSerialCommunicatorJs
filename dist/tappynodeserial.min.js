!function(n,e){"function"==typeof define&&define.amd?define(["serialport"],e):module.exports=e(require("serialport"))}(this,function(n){return NodeSerialCommunicator=function(e){var t=this;if("undefined"!=typeof e&&null!==e&&"object"==typeof e.serial)this.serial=e.serial;else{if("undefined"==typeof e||null===e||"string"!=typeof e.path)throw new Error("Must either specify a path or a constructed serial port");this.serial=new n(e.path,{baudRate:115200,autoOpen:!1})}this.isConnecting=!1,this.hasAttached=!1,this.disconnectImmediately=!1,this.disconnectCb=function(){},this.dataReceivedCallback=function(n){},this.errorCallback=function(n){},this.readCallback=function(n){t.dataReceivedCallback(new Uint8Array(n))}},NodeSerialCommunicator.prototype={attachReadWrite:function(){var n=this;n.hasAttached||(n.hasAttached=!0,n.serial.on("data",n.readCallback))},connect:function(n){var e=this;e.isConnecting||e.isConnected()||(e.isConnecting=!0,e.serial.open(function(t){e.isConnecting=!1,e.attachReadWrite(),"function"==typeof n&&n(t),e.disconnectImmediately&&e.disconnectUnsafe()}))},flush:function(n){},isConnected:function(){var n=this;return n.serial.isOpen},disconnectUnsafe:function(){var n=this;if(n.isConnecting)throw"Connection still in the process of being established";n.isConnected()&&n.serial.close(function(e){"function"==typeof n.disconnectCb&&n.disconnectCb(e)})},disconnect:function(n){var e=this;e.disconnectImmediately=!0,"function"==typeof n&&(e.disconnectCb=n),!e.isConnecting&&e.isConnected()&&e.disconnectUnsafe()},send:function(n){var e=this;e.serial.write(Buffer.from(n),function(t){if(t&&"function"==typeof e.errorCallback){var i={buffer:n,nodeError:t};e.errorCallback(i)}})},setDataCallback:function(n){var e=this;e.dataReceivedCallback=n},setErrorCallback:function(n){var e=this;e.errorCallback=n}},NodeSerialCommunicator});